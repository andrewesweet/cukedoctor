[
  {
    "line": 2,
    "elements": [
      {
        "start_timestamp": "2020-04-27T07:09:18.950Z",
        "line": 11,
        "name": "Convert features test output into documentation",
        "description": "",
        "id": "cukedoctor-converter;convert-features-test-output-into-documentation",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "passed"
            },
            "line": 13,
            "name": "The following two features:",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.OrderingSteps.the_following_two_features(java.lang.String)"
            },
            "keyword": "Given ",
            "doc_string": {
              "line": 14,
              "value": "Feature: Feature1\n\n  Scenario: Scenario feature 1\n\n    Given scenario step\n\nFeature: Feature2\n\n  Scenario: Scenario feature 2\n\n    Given scenario step"
            }
          },
          {
            "result": {
              "duration": 16000000,
              "status": "passed"
            },
            "line": 27,
            "name": "I convert their json test output using cukedoctor converter",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.ConverterSteps.I_convert_their_json_output_report_using_cukedoctor_converter(java.lang.String)"
            },
            "keyword": "When ",
            "doc_string": {
              "content_type": "asciidoc",
              "line": 28,
              "value": "[IMPORTANT]\n\u003d\u003d\u003d\u003d\u003d\u003d\nTo generate cucumber .json output files just execute your _BDD_ tests with *json* formatter, example:\n\n[source,java]\n----\n@RunWith(Cucumber.class)\n@CucumberOptions(plugin \u003d {\"json:target/cucumber.json\"} )\n----\nNOTE: *plugin* option replaced *format* option which was deprecated in newer cucumber versions.\n\n\u003d\u003d\u003d\u003d\u003d\u003d"
            }
          },
          {
            "result": {
              "status": "passed"
            },
            "line": 43,
            "name": "I should have awesome living documentation",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.ConverterSteps.I_should_have_awesome_living_documentation(java.lang.String)"
            },
            "keyword": "Then ",
            "doc_string": {
              "content_type": "asciidoc",
              "line": 44,
              "value": "\n\u003d *Documentation*\n\n\n\n\u003d\u003d *Summary*\n[cols\u003d\"12*^m\", options\u003d\"header,footer\"]\n|\u003d\u003d\u003d\n3+|Scenarios 7+|Steps 2+|Features: 2\n\n|[green]#*Passed*#\n|[red]#*Failed*#\n|Total\n|[green]#*Passed*#\n|[red]#*Failed*#\n|[purple]#*Skipped*#\n|[maroon]#*Pending*#\n|[yellow]#*Undefined*#\n|[blue]#*Missing*#\n|Total\n|Duration\n|Status\n\n12+^|*\u003c\u003cFeature1\u003e\u003e*\n|1\n|0\n|1\n|1\n|0\n|0\n|0\n|0\n|0\n|1\n|647ms\n|[green]#*passed*#\n\n12+^|*\u003c\u003cFeature2\u003e\u003e*\n|1\n|0\n|1\n|1\n|0\n|0\n|0\n|0\n|0\n|1\n|000ms\n|[green]#*passed*#\n12+^|*Totals*\n|2|0|2|2|0|0|0|0|0|2 2+|647ms\n|\u003d\u003d\u003d\n\n\u003d\u003d *Features*\n\n[[Feature1, Feature1]]\n\u003d\u003d\u003d *Feature1*\n\n\u003d\u003d\u003d\u003d Scenario: Scenario feature 1\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\nscenario step icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(647ms)#\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n[[Feature2, Feature2]]\n\u003d\u003d\u003d *Feature2*\n\n\u003d\u003d\u003d\u003d Scenario: Scenario feature 2\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\nscenario step icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(000ms)#\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n"
            }
          }
        ],
        "tags": [
          {
            "name": "@order-0"
          }
        ]
      }
    ],
    "name": "Cukedoctor Converter",
    "description": "  \u003d\u003d\u003d\u003d\n  [quote]\n  ____\n  In order to have awesome _living documentation_\n  As a bdd developer\n  I want to use *Cukedoctor* to convert my cucumber test results into `readable` living documentation.\n  ____\n  \u003d\u003d\u003d\u003d",
    "id": "cukedoctor-converter",
    "keyword": "Feature",
    "uri": "classpath:com/github/cukedoctor/bdd/cukedoctor/converter.feature",
    "tags": [
      {
        "name": "@order-0",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "start_timestamp": "2020-04-27T07:09:18.976Z",
        "line": 26,
        "name": "DocString enrichment activated by the content type",
        "description": "  Asciidoc markup can be used in feature *DocStrings*. To do so you can enable it by using the content type *[asciidoc]* in the DocString.",
        "id": "enrich-features;docstring-enrichment-activated-by-the-content-type",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1000000,
              "status": "passed"
            },
            "line": 29,
            "name": "The following two features:",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.OrderingSteps.the_following_two_features(java.lang.String)"
            },
            "keyword": "Given ",
            "doc_string": {
              "line": 30,
              "value": "Feature: Discrete class feature\n\n  Scenario: Render source code\n\n    Given the following source code in docstrings\n\"\"\"asciidoc\n  [source, java]\n  -----\n  public int sum(int x, int y){\n  int result \u003d x + y;\n  return result; (1)\n  }\n  -----\n  \u003c1\u003e We can have callouts in living documentation\n\"\"\"\n\n  Scenario: Render table\n\n    Given the following table\n \"\"\"asciidoc\n  |\u003d\u003d\u003d\n\n  | Cell in column 1, row 1 | Cell in column 2, row 1\n  | Cell in column 1, row 2 | Cell in column 2, row 2\n  | Cell in column 1, row 3 | Cell in column 2, row 3\n\n  |\u003d\u003d\u003d\n\"\"\""
            }
          },
          {
            "result": {
              "duration": 14000000,
              "status": "passed"
            },
            "line": 61,
            "name": "I convert enriched docstring with asciidoc content type using cukedoctor converter",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.I_convert_enriched_docstring_with_content_type_using_cukedoctor_converter()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "passed"
            },
            "line": 63,
            "name": "DocString asciidoc output must be rendered in my documentation",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.DocString_asciidoc_output_must_be_rendered_in_my_documentation(java.lang.String)"
            },
            "keyword": "Then ",
            "doc_string": {
              "content_type": "asciidoc",
              "line": 64,
              "value": "\u003d\u003d *Features*\n\n[[Discrete-class-feature, Discrete class feature]]\n\u003d\u003d\u003d *Discrete class feature*\n\n\u003d\u003d\u003d\u003d Scenario: Render source code\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\nthe following source code in docstrings icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(002ms)#\n******\n\n[discrete]\n[source, java]\n-----\npublic int sum(int x, int y){\n    int result \u003d x + y;\n    return result; (1)\n}\n-----\n[discrete]\n\u003c1\u003e We can have callouts in living documentation\n\n\n******\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n\u003d\u003d\u003d\u003d Scenario: Render table\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\nthe following table icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(000ms)#\n******\n\n[discrete]\n|\u003d\u003d\u003d\n| Cell in column 1, row 1 | Cell in column 2, row 1\n| Cell in column 1, row 2 | Cell in column 2, row 2\n| Cell in column 1, row 3 | Cell in column 2, row 3\n|\u003d\u003d\u003d\n\n\n******\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n"
            }
          }
        ],
        "tags": [
          {
            "name": "@order-2"
          }
        ]
      },
      {
        "start_timestamp": "2020-04-27T07:09:19.001Z",
        "line": 113,
        "name": "DocString enrichment activated by a feature tag",
        "description": "  Asciidoc markup can be used in feature *DocStrings*. You can enable this by applying the tag [@asciidoc] to the feature. Note this enables the enrichment for all DocStrings within the feature.",
        "id": "enrich-features;docstring-enrichment-activated-by-a-feature-tag",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "passed"
            },
            "line": 116,
            "name": "The following two features:",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.OrderingSteps.the_following_two_features(java.lang.String)"
            },
            "keyword": "Given ",
            "doc_string": {
              "line": 117,
              "value": "@asciidoc\nFeature: Discrete class feature\n\n  Scenario: Render source code\n\n    Given the following source code in docstrings\n\"\"\"\n  [source, java]\n  -----\n  public int sum(int x, int y){\n  int result \u003d x + y;\n  return result; (1)\n  }\n  -----\n  \u003c1\u003e We can have callouts in living documentation\n\"\"\"\n\n  Scenario: Render table\n\n    Given the following table\n \"\"\"\n  |\u003d\u003d\u003d\n\n  | Cell in column 1, row 1 | Cell in column 2, row 1\n  | Cell in column 1, row 2 | Cell in column 2, row 2\n  | Cell in column 1, row 3 | Cell in column 2, row 3\n\n  |\u003d\u003d\u003d\n\"\"\""
            }
          },
          {
            "result": {
              "duration": 14000000,
              "status": "passed"
            },
            "line": 149,
            "name": "I convert enriched docstring with asciidoc feature tag using cukedoctor converter",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.I_convert_docstring_enriched_json_output_activiated_with_a_feature_tag_using_cukedoctor_converter()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "passed"
            },
            "line": 151,
            "name": "DocString asciidoc output must be rendered in my documentation",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.DocString_asciidoc_output_must_be_rendered_in_my_documentation(java.lang.String)"
            },
            "keyword": "Then ",
            "doc_string": {
              "content_type": "asciidoc",
              "line": 152,
              "value": "\u003d\u003d *Features*\n\n[[Discrete-class-feature, Discrete class feature]]\n\u003d\u003d\u003d *Discrete class feature*\n\n\u003d\u003d\u003d\u003d Scenario: Render source code\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\nthe following source code in docstrings icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(011ms)#\n******\n\n[discrete]\n[source, java]\n-----\npublic int sum(int x, int y){\n    int result \u003d x + y;\n    return result; (1)\n}\n-----\n[discrete]\n\u003c1\u003e We can have callouts in living documentation\n\n\n******\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n\u003d\u003d\u003d\u003d Scenario: Render table\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\nthe following table icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(000ms)#\n******\n\n[discrete]\n|\u003d\u003d\u003d\n| Cell in column 1, row 1 | Cell in column 2, row 1\n| Cell in column 1, row 2 | Cell in column 2, row 2\n| Cell in column 1, row 3 | Cell in column 2, row 3\n|\u003d\u003d\u003d\n\n\n******\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n"
            }
          }
        ],
        "tags": [
          {
            "name": "@order-2"
          }
        ]
      },
      {
        "start_timestamp": "2020-04-27T07:09:19.018Z",
        "line": 201,
        "name": "DocString enrichment activated by a scenario tag",
        "description": "  Asciidoc markup can be used in feature *DocStrings*. You can enable this by applying the tag [@asciidoc] to the scenario. Note this enables the enrichment for all DocStrings within the scenario.",
        "id": "enrich-features;docstring-enrichment-activated-by-a-scenario-tag",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "passed"
            },
            "line": 204,
            "name": "The following two features:",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.OrderingSteps.the_following_two_features(java.lang.String)"
            },
            "keyword": "Given ",
            "doc_string": {
              "line": 205,
              "value": "Feature: Discrete class feature\n\n  @asciidoc\n  Scenario: Render source code\n\n    Given the following source code in docstrings\n\"\"\"\n  [source, java]\n  -----\n  public int sum(int x, int y){\n  int result \u003d x + y;\n  return result; (1)\n  }\n  -----\n  \u003c1\u003e We can have callouts in living documentation\n\"\"\"\n\n  @asciidoc\n  Scenario: Render table\n\n    Given the following table\n \"\"\"\n  |\u003d\u003d\u003d\n\n  | Cell in column 1, row 1 | Cell in column 2, row 1\n  | Cell in column 1, row 2 | Cell in column 2, row 2\n  | Cell in column 1, row 3 | Cell in column 2, row 3\n\n  |\u003d\u003d\u003d\n\"\"\""
            }
          },
          {
            "result": {
              "duration": 8000000,
              "status": "passed"
            },
            "line": 238,
            "name": "I convert enriched docstring with asciidoc scenario tag using cukedoctor converter",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.I_convert_docstring_enriched_json_output_activiated_with_a_scenario_tag_using_cukedoctor_converter()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "passed"
            },
            "line": 241,
            "name": "DocString asciidoc output must be rendered in my documentation",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.EnrichmentSteps.DocString_asciidoc_output_must_be_rendered_in_my_documentation(java.lang.String)"
            },
            "keyword": "Then ",
            "doc_string": {
              "content_type": "asciidoc",
              "line": 242,
              "value": "\u003d\u003d *Features*\n\n[[Discrete-class-feature, Discrete class feature]]\n\u003d\u003d\u003d *Discrete class feature*\n\n\u003d\u003d\u003d\u003d Scenario: Render source code\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\nthe following source code in docstrings icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(002ms)#\n******\n\n[discrete]\n[source, java]\n-----\npublic int sum(int x, int y){\n    int result \u003d x + y;\n    return result; (1)\n}\n-----\n[discrete]\n\u003c1\u003e We can have callouts in living documentation\n\n\n******\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n\u003d\u003d\u003d\u003d Scenario: Render table\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\nthe following table icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(000ms)#\n******\n\n[discrete]\n|\u003d\u003d\u003d\n| Cell in column 1, row 1 | Cell in column 2, row 1\n| Cell in column 1, row 2 | Cell in column 2, row 2\n| Cell in column 1, row 3 | Cell in column 2, row 3\n|\u003d\u003d\u003d\n\n\n******\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n"
            }
          }
        ],
        "tags": [
          {
            "name": "@order-2"
          }
        ]
      }
    ],
    "name": "Enrich features",
    "description": "  \u003d\u003d\u003d\u003d\n  [quote]\n  ____\n  In order to have awesome _living documentation_\n  As a bdd developer\n  I want to render asciidoc markup inside my features.\n  ____\n  \u003d\u003d\u003d\u003d\n\n  https://asciidoctor.org/docs/what-is-asciidoc/[Asciidoc^] markup can be used in feature *DocStrings*. To do so you can enable it by using *@asciidoc* tag at `feature` or `scenario` level.\n\n  [IMPORTANT]\n  \u003d\u003d\u003d\u003d\u003d\n  Adding @asciidoc tag at *feature level* will make cukedoctor interpret `all features docstrings` as Asciidoc markup.\n\n  Adding @asciidoc at *scenario level* will make cukedoctor interpret `all steps docstrings` as asciidoc markup.\n\n  TIP: To enable asciidoc markup in a *single step* you can use `asciidoc` as https://relishapp.com/cucumber/cucumber/docs/gherkin/doc-strings#docstring-with-interesting-content-type[docstring content type^].\n  \u003d\u003d\u003d\u003d\u003d\n\n  NOTE: Feature and scenario descriptions are automatically interpreted as Asciidoc markup without the need for adding the feature tag.",
    "id": "enrich-features",
    "keyword": "Feature",
    "uri": "classpath:com/github/cukedoctor/bdd/cukedoctor/enrichment.feature",
    "tags": [
      {
        "name": "@order-2",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "start_timestamp": "2020-04-27T07:09:19.033Z",
        "line": 11,
        "name": "Introduction chapter in classpath",
        "description": "  NOTE: The introduction file must be named *intro-chapter.adoc* and can be in any package of your application,\n\n  [TIP]\n  \u003d\u003d\u003d\u003d\n  By default Cukedoctor will look into application folders but you can make Cukedoctor look into external folder by setting the following system property:\n  [source,java]\n  ----\n  System.setProperty(\"INTRO_CHAPTER_DIR\",\"/home/some/external/folder\");\n  ----\n  \u003d\u003d\u003d\u003d",
        "id": "documentation-introduction-chapter;introduction-chapter-in-classpath",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "passed"
            },
            "line": 23,
            "name": "The following two features:",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.OrderingSteps.the_following_two_features(java.lang.String)"
            },
            "keyword": "Given ",
            "doc_string": {
              "line": 24,
              "value": "Feature: Feature1\n\n  Scenario: Scenario feature 1\n\n    Given scenario step\n\nFeature: Feature2\n\n  Scenario: Scenario feature 2\n\n    Given scenario step"
            }
          },
          {
            "result": {
              "duration": 6000000,
              "status": "passed"
            },
            "line": 39,
            "name": "The following asciidoc document is on your application classpath",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.IntroChapterSteps.I_convert_their_json_output_report_using_cukedoctor_converter(java.lang.String)"
            },
            "keyword": "And ",
            "doc_string": {
              "content_type": "asciidoc",
              "line": 40,
              "value": "\u003d *Introduction*\n\nCukedoctor is a *Living documentation* tool which integrates Cucumber and Asciidoctor in order to convert your _BDD_ tests results into an awesome documentation.\n\nHere are some design principles:\n\n* Living documentation should be readable and highlight your software features;\n** Most bdd tools generate reports and not a truly documentation.\n* Cukedoctor *do not* introduce a new API that you need to learn, instead it operates on top of http://www.relishapp.com/cucumber/cucumber/docs/formatters/json-output-formatter[cucumber json output^] files;\n** In the \u0027worst case\u0027 to \u003c\u003cEnrich-features,enhance\u003e\u003e your documentation you will need to know a bit of http://asciidoctor.org/docs/what-is-asciidoc/[asciidoc markup^]."
            }
          },
          {
            "result": {
              "status": "passed"
            },
            "line": 53,
            "name": "Bdd tests results are converted into documentation by Cukedoctor",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.IntroChapterSteps.Bdd_tests_results_are_converted_into_documentation_by_Cukedoctor()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1000000,
              "status": "passed"
            },
            "line": 57,
            "name": "Resulting documentation should have the provided introduction chapter",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.IntroChapterSteps.I_should_have_awesome_living_documentation(java.lang.String)"
            },
            "keyword": "Then ",
            "doc_string": {
              "content_type": "asciidoc",
              "line": 58,
              "value": "\n\u003d *Documentation*\n\n\u003d\u003d *Introduction*\n\nCukedoctor is a *Living documentation* tool which integrates Cucumber and Asciidoctor in order to convert your _BDD_ tests results into an awesome documentation.\n\nHere are some design principles:\n\n* Living documentation should be readable and highlight your software features;\n** Most bdd tools generate reports and not a truly documentation.\n* Cukedoctor *do not* introduce a new API that you need to learn, instead it operates on top of http://www.relishapp.com/cucumber/cucumber/docs/formatters/json-output-formatter[cucumber json output^] files;\n** In the \u0027worst case\u0027 to \u003c\u003cEnrich-features,enhance\u003e\u003e your documentation you will need to know a bit of http://asciidoctor.org/docs/what-is-asciidoc/[asciidoc markup^].\n\n\u003d\u003d *Summary*\n[cols\u003d\"12*^m\", options\u003d\"header,footer\"]\n|\u003d\u003d\u003d\n3+|Scenarios 7+|Steps 2+|Features: 2\n\n|[green]#*Passed*#\n|[red]#*Failed*#\n|Total\n|[green]#*Passed*#\n|[red]#*Failed*#\n|[purple]#*Skipped*#\n|[maroon]#*Pending*#\n|[yellow]#*Undefined*#\n|[blue]#*Missing*#\n|Total\n|Duration\n|Status\n\n12+^|*\u003c\u003cFeature1\u003e\u003e*\n|1\n|0\n|1\n|1\n|0\n|0\n|0\n|0\n|0\n|1\n|647ms\n|[green]#*passed*#\n\n12+^|*\u003c\u003cFeature2\u003e\u003e*\n|1\n|0\n|1\n|1\n|0\n|0\n|0\n|0\n|0\n|1\n|000ms\n|[green]#*passed*#\n12+^|*Totals*\n|2|0|2|2|0|0|0|0|0|2 2+|647ms\n|\u003d\u003d\u003d\n\n\u003d\u003d *Features*\n\n[[Feature1, Feature1]]\n\u003d\u003d\u003d *Feature1*\n\n\u003d\u003d\u003d\u003d Scenario: Scenario feature 1\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\nscenario step icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(647ms)#\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n[[Feature2, Feature2]]\n\u003d\u003d\u003d *Feature2*\n\n\u003d\u003d\u003d\u003d Scenario: Scenario feature 2\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\nscenario step icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(000ms)#\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n"
            }
          }
        ],
        "tags": [
          {
            "name": "@order-3"
          }
        ]
      }
    ],
    "name": "Documentation introduction chapter",
    "description": "  \u003d\u003d\u003d\u003d\n  [quote]\n  ____\n  In order to have an introduction chapter in my documentation\n  As a bdd developer\n  I want to be able to provide an asciidoc based document which introduces my software.\n  ____\n  \u003d\u003d\u003d\u003d",
    "id": "documentation-introduction-chapter",
    "keyword": "Feature",
    "uri": "classpath:com/github/cukedoctor/bdd/cukedoctor/intro-chapter.feature",
    "tags": [
      {
        "name": "@order-3",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "start_timestamp": "2020-04-27T07:09:19.045Z",
        "line": 12,
        "name": "Default ordering",
        "description": "",
        "id": "ordering;default-ordering",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "passed"
            },
            "line": 14,
            "name": "The following two features:",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.OrderingSteps.the_following_two_features(java.lang.String)"
            },
            "keyword": "Given ",
            "doc_string": {
              "line": 15,
              "value": "Feature: Feature1\n\n  Scenario: Scenario feature 1\n\n    Given scenario step\n\nFeature: Feature2\n\n  Scenario: Scenario feature 2\n\n    Given scenario step"
            }
          },
          {
            "result": {
              "duration": 5000000,
              "status": "passed"
            },
            "line": 28,
            "name": "I convert them using default order",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.OrderingSteps.I_convert_the_using_default_order()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1000000,
              "status": "passed"
            },
            "line": 30,
            "name": "Features should be ordered by name in resulting documentation",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.OrderingSteps.Features_should_be_ordered_by_name_in_resulting_documentation(java.lang.String)"
            },
            "keyword": "Then ",
            "doc_string": {
              "content_type": "asciidoc",
              "line": 31,
              "value": "\u003d\u003d *Features*\n\n[[Feature1, Feature1]]\n\u003d\u003d\u003d *Feature1*\n\n\u003d\u003d\u003d\u003d Scenario: Scenario feature 1\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\nscenario step icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(647ms)#\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n[[Feature2, Feature2]]\n\u003d\u003d\u003d *Feature2*\n\n\u003d\u003d\u003d\u003d Scenario: Scenario feature 2\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\nscenario step icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(000ms)#\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n"
            }
          }
        ],
        "tags": [
          {
            "name": "@order-1"
          }
        ]
      },
      {
        "start_timestamp": "2020-04-27T07:09:19.054Z",
        "line": 57,
        "name": "Custom ordering with tags",
        "description": "    NOTE: Ordering is done using feature tag *@order-*",
        "id": "ordering;custom-ordering-with-tags",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "passed"
            },
            "line": 61,
            "name": "The following two features:",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.OrderingSteps.the_following_two_features(java.lang.String)"
            },
            "keyword": "Given ",
            "doc_string": {
              "line": 62,
              "value": "@order-2\nFeature: Feature1\n\n  Scenario: Scenario feature 1\n\n    Given scenario step\n\n@order-1\nFeature: Feature2\n\n  Scenario: Scenario feature 2\n\n    Given scenario step"
            }
          },
          {
            "result": {
              "duration": 6000000,
              "status": "passed"
            },
            "line": 77,
            "name": "I convert them using tag order",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.OrderingSteps.I_convert_them__using_tag_order()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "passed"
            },
            "line": 79,
            "name": "Features should be ordered respecting order tag",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.OrderingSteps.Features_should_be_ordered_respecting_order_tag(java.lang.String)"
            },
            "keyword": "Then ",
            "doc_string": {
              "content_type": "asciidoc",
              "line": 80,
              "value": "\u003d\u003d *Features*\n\n[[Feature2, Feature2]]\n\u003d\u003d\u003d *Feature2*\n\n\u003d\u003d\u003d\u003d Scenario: Scenario feature 2\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\nscenario step icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(000ms)#\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n[[Feature1, Feature1]]\n\u003d\u003d\u003d *Feature1*\n\n\u003d\u003d\u003d\u003d Scenario: Scenario feature 1\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\nscenario step icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(001ms)#\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n"
            }
          }
        ],
        "tags": [
          {
            "name": "@order-1"
          }
        ]
      }
    ],
    "name": "Ordering",
    "description": "  \u003d\u003d\u003d\u003d\n  [quote]\n  ____\n  In order to have features ordered in living documentation\n  As a bdd developer\n  I want to control the order of features in my documentation\n  ____\n  \u003d\u003d\u003d\u003d",
    "id": "ordering",
    "keyword": "Feature",
    "uri": "classpath:com/github/cukedoctor/bdd/cukedoctor/ordering.feature",
    "tags": [
      {
        "name": "@order-1",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "start_timestamp": "2020-04-27T07:09:19.061Z",
        "line": 4,
        "name": "Render feature tags in that feature\u0027s scenarios",
        "description": "",
        "id": "tag-rendering;render-feature-tags-in-that-feature-s-scenarios",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "passed"
            },
            "line": 6,
            "name": "The following two features:",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.OrderingSteps.the_following_two_features(java.lang.String)"
            },
            "keyword": "Given ",
            "doc_string": {
              "line": 7,
              "value": "@someTag\nFeature: Feature1\n\n  @otherTag\n  Scenario: Scenario feature 1\n\n    Given scenario step\n\n  @someTag @otherTag\n  Scenario: Scenario feature 2\n\n    Given scenario step"
            }
          },
          {
            "result": {
              "duration": 5000000,
              "status": "passed"
            },
            "line": 22,
            "name": "I render the feature",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.TagRenderingSteps.I_render_the_feature()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1000000,
              "status": "passed"
            },
            "line": 24,
            "name": "the tags displayed under each scenario should not have duplicates",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.TagRenderingSteps.the_tags_displayed_under_each_scenario_should_not_have_duplicates(java.lang.String)"
            },
            "keyword": "Then ",
            "doc_string": {
              "content_type": "asciidoc",
              "line": 25,
              "value": "\u003d\u003d *Features*\n\n[[Feature1, Feature1]]\n\u003d\u003d\u003d *Feature1*\n\n\u003d\u003d\u003d\u003d Scenario: Scenario feature 1\n[small]#tags: @someTag,@otherTag#\n\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\nscenario step icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(001ms)#\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n\u003d\u003d\u003d\u003d Scenario: Scenario feature 2\n[small]#tags: @someTag,@otherTag#\n\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\nscenario step icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(000ms)#\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n"
            }
          }
        ],
        "tags": [
          {
            "name": "@order-4"
          }
        ]
      },
      {
        "start_timestamp": "2020-04-27T07:09:19.070Z",
        "line": 52,
        "name": "Ignore cukedoctor tags in resulting documentation",
        "description": "   Cukedoctor specific tags like `@asciidoc` and `@order` *should not* be rendered in resulting documentation.",
        "id": "tag-rendering;ignore-cukedoctor-tags-in-resulting-documentation",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "passed"
            },
            "line": 56,
            "name": "The following two features:",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.OrderingSteps.the_following_two_features(java.lang.String)"
            },
            "keyword": "Given ",
            "doc_string": {
              "line": 57,
              "value": "@someTag @asciidoc @order-99\nFeature: Feature1\n\n  @otherTag @asciidoc\n  Scenario: Scenario feature 1\n\n    Given scenario step\n\n  @someTag @otherTag\n  Scenario: Scenario feature 2\n\n    Given scenario step"
            }
          },
          {
            "result": {
              "duration": 5000000,
              "status": "passed"
            },
            "line": 72,
            "name": "I render the feature",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.TagRenderingSteps.I_render_the_feature()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "passed"
            },
            "line": 74,
            "name": "Cukedoctor tags should not be rendered in documentation",
            "match": {
              "location": "com.github.cukedoctor.bdd.cukedoctor.TagRenderingSteps.Cukedoctor_tags_should_not_be_rendered_in_documentation(java.lang.String)"
            },
            "keyword": "Then ",
            "doc_string": {
              "content_type": "asciidoc",
              "line": 75,
              "value": "\u003d\u003d *Features*\n\n[[Feature1, Feature1]]\n\u003d\u003d\u003d *Feature1*\n\n\u003d\u003d\u003d\u003d Scenario: Scenario feature 1\n[small]#tags: @someTag,@otherTag#\n\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\nscenario step icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(001ms)#\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n\u003d\u003d\u003d\u003d Scenario: Scenario feature 2\n[small]#tags: @someTag,@otherTag#\n\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nGiven ::\nscenario step icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(000ms)#\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n"
            }
          }
        ],
        "tags": [
          {
            "name": "@order-4"
          }
        ]
      }
    ],
    "name": "Tag rendering",
    "description": "",
    "id": "tag-rendering",
    "keyword": "Feature",
    "uri": "classpath:com/github/cukedoctor/bdd/cukedoctor/tag-rendering.feature",
    "tags": [
      {
        "name": "@order-4",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      }
    ]
  }
]